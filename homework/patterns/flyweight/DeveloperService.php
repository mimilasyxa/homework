<?php

class DeveloperService
{
    public function getDeveloper()
    {
        $developerFactory = new DeveloperFactory();
        $delphiDev = $developerFactory->getDeveloperBySpecialty('Delphi');
        $delphiDev->writingCode(); // Пишет код на делфи

        $jsDev = $developerFactory->getDeveloperBySpecialty('Javascript');
        $jsDev->writingCode(); // Пишет код на Js
    }
}




/*
 * Если у нас есть класс у которого есть неограниченное количество объектов которые одинаковы по своей сути
 * то вместо того чтобы каждый раз создавать новый объект класса мы можем сделать массив из объектов классов
 * и вытаскивать их из этого массива при желании, таким образом мы создадим по однму объекту класса но сможем вызывать его в любой удобные момент без создания нового
 * При этом внутри этих объектов не должно быть сеттеров или публичных переменных, их нельзя изменять так как при изменении чего либо мы изменим этот объект внутри массива
 * и соответственно при следующих вызовах объекта он будет изменён нашими действиями
 * Паттерн Легковес предлагает не хранить в классе внешнее состояние,
а передавать его в те или иные методы через параметры. Таким образом,
одни и те же объекты можно будет повторно использовать в различных контекстах.
Но главное – понадобится гораздо меньше объектов, ведь теперь они будут отличаться только внутренним состоянием,
а оно имеет не так много вариаций.*/